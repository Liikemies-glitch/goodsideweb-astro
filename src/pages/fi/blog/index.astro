---
// --- NOTE FOR NEXT SESSION ---
// We are encountering persistent TypeScript errors below, specifically:
// - "Property 'data' does not exist on type 'never'"
// - "Type '"blog"' does not satisfy the constraint 'never'."
// This happens despite defining the 'blog' collection in src/content/config.ts
// and explicitly typing variables with CollectionEntry<'blog'>.
// Attempts to fix (simplifying getCollection, explicit types on sort/map) failed.
// Next steps:
// 1. Restart the Astro dev server (npm run dev) & potentially the IDE.
// 2. If errors persist, investigate further (check Astro/TS versions, look for conflicts).
// 3. Proceed with creating src/pages/blog/[...slug].astro.
// --- END NOTE ---

// src/pages/blog/index.astro
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import HeroSection from '../../../components/HeroSection.astro';

// Import all hero images using glob
// Use 'any' type hint to bypass complex type issues for now
const heroImageModules = import.meta.glob<any>('../../../assets/blog/images/**/featured.webp');

// 1. Fetch all published blog posts and filter for Finnish
const allPosts = await getCollection('blog');
const finnishPosts = allPosts.filter((post: CollectionEntry<'blog'>) => post.id.endsWith('.fi.md'));

// 2. Sort posts by publication date (newest first)
// Add resolved image metadata to each post object
const postsWithImages = await Promise.all(finnishPosts.map(async (post) => {
  let heroImage = null;
  const imagePath = post.data.heroImage; // Path relative to content file
  const globKey = `../../../assets/blog/images/${post.slug}/featured.webp`; 
  if (imagePath && heroImageModules[globKey]) {
    const imageModule = await heroImageModules[globKey](); 
    // Cast to any to access default property
    heroImage = (imageModule as any).default;
  }
  return {
    ...post,
    data: {
      ...post.data,
      heroImage // Replace string path with resolved image metadata
    }
  };
}));

// Rely on inference for sortedPosts type
const sortedPosts = postsWithImages.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const pageTitle = "Blogi | The Good Side";
const pageDescription = "Lue The Good Side -blogin viimeisimm채t artikkelit tuotestrategiasta, SaaSista, designista ja muotoilusta.";
---
<BaseLayout title={pageTitle} description={pageDescription}>
  <section class="blog-index container">
    <HeroSection
        title="Blogi"
        paragraph="Viimeisimm채t artikkelit tuotestrategiasta, SaaSista, designista ja muotoilusta."
        textOnly={true}
        paddingTop="0"
        paddingBottom="var(--spacing-xl)"
        textAlign="center"
    />

    <div class="blog-index__grid">
      {sortedPosts.map((post) => ( // Rely on inferred type for post
        <article class="blog-card">
          <a href={`/fi/blog/${post.slug}/`} class="blog-card__link">
            {post.data.heroImage && (
              <div class="blog-card__image-container">
                <Image
                  src={post.data.heroImage}
                  alt={post.data.heroImageAlt || post.data.title}
                  width={800}
                  height={450}
                  widths={[200, 400, 800]}
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  format="webp"
                  quality={80}
                  loading="lazy"
                  decoding="async"
                  class="blog-card__image"
                />
              </div>
            )}
            <div class="blog-card__content">
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="blog-card__tags">
                  {post.data.tags.map((tag: string) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )}
              <h3 class="blog-card__title">{post.data.title}</h3>
              <p class="blog-card__excerpt">{post.data.description || 'Lue artikkeli...'}</p>
              <p class="blog-card__date">
                {new Date(post.data.pubDate).toLocaleDateString('fi-FI', { year: 'numeric', month: 'long', day: 'numeric' })}
              </p>
              <span class="blog-card__readmore">Lue lis채채 &rarr;</span>
            </div>
          </a>
        </article>
      ))}
    </div>
  </section>
</BaseLayout>

<style>
  .blog-index {
    padding-top: var(--spacing-xl);
    padding-bottom: var(--spacing-xxl);
  }

  .blog-index__grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
  }

  .blog-card {
    background: var(--background);
    border-radius: var(--border-radius);
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.07);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%; /* Make cards equal height within grid row */
    will-change: transform; /* Optimize performance */
  }

   [data-theme="dark"] .blog-card {
       background: var(--secondary-color);
       box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05);
   }

  .blog-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(255, 0, 55, 0.15);
  }

   [data-theme="dark"] .blog-card:hover {
       box-shadow: 0 8px 25px rgba(255, 0, 55, 0.25);
   }

  .blog-card__link {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%; /* Ensure link takes full card height */
  }

  .blog-card__image-container {
    width: 100%;
    aspect-ratio: 16 / 9; /* Maintain aspect ratio */
    background-color: var(--light-background); /* Placeholder background */
    overflow: hidden;
  }

   [data-theme="dark"] .blog-card__image-container {
       background-color: #2a2a2a;
   }

  .blog-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    will-change: transform; /* Optimize performance */
  }

  .blog-card:hover .blog-card__image {
    transform: scale(1.05);
  }

  .blog-card__content {
    padding: var(--spacing-md);
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Allows content to fill space */
  }

  .blog-card__tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-sm);
  }

  .tag { /* Reusing tag style from BlogPostLayout */
    display: inline-block;
    padding: 4px 12px;
    background: rgba(255, 0, 55, 0.1);
    color: var(--primary-color);
    border-radius: 100px;
    font-size: 0.75rem; /* Slightly smaller tag */
    font-weight: 500;
  }

  .blog-card__title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: var(--spacing-sm);
    line-height: 1.3;
    color: var(--secondary-color);
  }

  [data-theme="dark"] .blog-card__title {
     color: var(--light-background);
  }

  .blog-card__excerpt {
    font-size: 0.95rem;
    color: var(--light-text);
    line-height: 1.5;
    margin-bottom: var(--spacing-md);
    flex-grow: 1; /* Pushes date and readmore down */
  }

  [data-theme="dark"] .blog-card__excerpt {
      color: #ccc; /* Lighter text for dark mode */
  }

  .blog-card__date {
      font-size: 0.8rem;
      color: var(--light-text);
      margin-bottom: var(--spacing-sm);
      margin-top: auto; /* Push to bottom if excerpt is short */
  }

  [data-theme="dark"] .blog-card__date {
      color: #aaa;
  }

  .blog-card__readmore {
    font-weight: 500;
    color: var(--primary-color);
    margin-top: auto; /* Push to bottom */
    align-self: flex-start; /* Align left */
  }
</style>
